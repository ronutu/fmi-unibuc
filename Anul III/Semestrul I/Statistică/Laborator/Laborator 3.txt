title: "Laborator 3"
output: html_notebook
---


# Operatii cu multimi

```{r}
x <- 1:10
y <- 5:15
z <- 6:13

#reuniune
union(x, y)

#intersectie
intersect(x, y)

#diferenta
setdiff(x, z) # x\z

#verif daca 2 multimi sunt egale
setequal (x, y)

x %in% y #verif pe elemente - verif daca elem lui x se regasesc in y

which(x %in% y) #returneaza indicii elementelor lui x care se regasesc in y
```

# Indexare

Extragerea unui subvector `[]`

## Indexare numerica - extragem elementul de pe o pozitie specifica, pozitie care e un nr intreg
```{r}
#x <-  1:10
x <- seq(0,1,length.out=20)

length(x)
x[4] #elementul de pe pozitia a 4-a

x[c(2, 7, 9)] # x de vectorul (2, 7, 9) - afiseaza elementele de pe poz 2, 7, 9

x[5:10] #afiseaza elementele de la pozitia 5 pana la pozitia 10

#x[1]=x[1.99]= afiseaza elem de pe poz 1 - pozitia specificata nu trb neaparat sa fie intreg - va lua automat partea intreaga

x[c(3,3,5,5,5)] #afiseaza elem de pe poz 3 de 2 ori si elem de pe poz 5 de 3 ori

x[-1] #elimina primul - doar afiseaza

x <- x[-1] #schimbam x-ul cu x fara primul element - aici se modifica x-ul

x[-c(1,2,3)] #elimina primele 3 elemente, adica elem de pe poz 1, 2 si 3 - doar afiseaza

#x[-1]=x[-1.99] -sunt egale

```
## Indexare logica - indexare prin vector logic, adica care are valori doar true sau false

```{r}
x <- 1:10

x[TRUE] #va returna vectorul x adica toate nr vor fi intoarse

x[c(TRUE,FALSE)] #va afisa din 2 in 2: x[1] e intors, x[2] nu e intors x[3] nu e intors, etc.

X[c(TRUE,FALSE,FALSE)] #primul va fi true, al doilea false, al treilea false, al patrulea va fi true, al 5-lea va fi false etc.

x[x>4] #afiseaza valorile din x carer sunt mai mari decat 4
```

Operatori logici:
```{r}
x < 3 #va returna true pt primele 2 valori, si false pt restul
x <=3
x > 4
x >= 4
x==5 #identic
x!= 6 #diferit de

which(!(x %in% y)) #returneaza indicii elementelor lui x care nu se regasesc in y

# operatorul sau | (||)
(x<3) | (x>7) #va face reuniune intre acele conditii si va afisa un vector logic cu val de true si false 

(x < 3) || (x > 7) #ca scalar #va afisa false daca gaseste numai false si true daca gaseste macar un true

# operatorul si & (&&)
(x<6) & (x>4)
(x<6) && (x>4)
```
```{r}
x <- seq(0,1, by=0.1)

x[(x<0.3) | (x>=0.8)] #afiseaza 0.0, 0.1, 0.2, 0.8, 0.9, 1.0 ca vector 
```
```{r}
set.seed(123)
x <- rbinom(28,150,0.7) #binomiala cu 28 de elemente
```

Vrem sa afisam un mesaj de tipul: In saptamana x am vorbit cel mai mult in ziua de ...  si anume ... minute.

```{r}
paste("in saptamana", x[1], "am vorbit cel mai mult in ziua de ", y[1], "si anume", z[1], "minute" ) #inlocuieste pe x[1] valoarea sa din vector, la fel pt y[1] si z[1], si apoi afiseaza medsajul scris intre ghilimele, cu valorile inlocuite
```

```{r}
ind <- which(x==max(x)) #afiseaza indicele valorii din x care este cea mai mare; retinem acest indice in ind
sapt <- rep(1:4, each=7) #repetare lui 1,2,3 4, fiecare de 7 ori
ziua <- rep(c("Lu","Ma","Mi","Jo","Vi","Sa","Du"), 4) #repeta secventa de zile ale saptamanii de 4 ori

sapt[ind]
ziua[ind]

paste("In saptamana", sapt[ind], "am vorbit cel mai mult in ziua de ", ziua[ind], "si anume", x[ind], "minute" )
```


In saptamana `r sapt[ind]` am vorbit cel mai mult in ziua de `r ziua[ind]` si anume `r x[ind]` minute. #aici doar face o afisare, nu apare si codul ca la paste

# Tablouri bidimensionale - Matrice

```{r}
x <- 1:12

#creare matrice
matrix(x, nrow=3, ncol=4) #matrice de 3 linii si 4 coloane; default, construieste matricea pe coloane
matrix(x, nrow=3, ncol=4, byrow=TRUE) #la fel ca mai sus, dar pe linii

c1 <- 1:10
c2 <- 11:20
c3 <- 21:30
#coloumn bind
cbind(c1,c2,c3) #alipeste c1 c2 c3 drept coloane, adica 10 lin si 3 col
#row bind
rbind(c1,c2,c3) #alipeste c1 c2 c3 drept linii, adica 10 col si 3 lin

m <- matrix(x, nrow=3, ncol=4)
cbind(m, c(1,1,3))
rbind(m, c(5,5,4,3))
```
```{r}
m1 <- matrix(x, nrow =3, ncol=4)
m2 <- matrix(runif(12), nrow=4)

m1+m2
m1-m2
m1*m2

m3 <- matrix(runif(12), nrow=4)

m1 %*% m3 #inmultirea dintre cele 2 matrici

dim(m1) #dim unei matrici
nrow(m1) #afis nr de linii
ncol(m1) #afis nr  de coloane
t(m1) #transpusa lui m1

diag(m1) #afiseaza diagonala matricei m1

a<-m1 %*% m3
det(a) #det lui a
#solve(a) #inversa lui a

m4 <- matrix(c(1,2,3,2,2,1,3,3,1), nrow=3, byrow= TRUE)
det(m4)

m4 %*% solve(m4) #ar trb sa dea I3

#produs scalar
crossprod(m4,a) #calculeaza transpusa lui m4 * a - echivalent cu t(m4) %*% a

diag(x=4) #creeaza pe I4

#urma unei matrici
sum(diag(a)) #face suma elementelor de pe diagonala matricei a

```
```{r}
a[2,3] #extrage elem de la linia 2 si col 3

a[2, ] #extrage lin 2 - se obtine un vector 

a[ ,3] #extrage col 3

a[c(1:2),c(1:2)] #extrage minorul princial 

a[-2,-3]

a[a[ ,1]>13,2]

v <-a[2, , drop = FALSE] #extrage lin 2 - se obtine o matrice
```